// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package startup

import (
	"github.com/gin-gonic/gin"
	"github.com/google/wire"
	"webookpro/internal/ioc"
	"webookpro/internal/repository"
	article2 "webookpro/internal/repository/article"
	"webookpro/internal/repository/cache"
	"webookpro/internal/repository/dao"
	"webookpro/internal/repository/dao/article"
	"webookpro/internal/service"
	"webookpro/internal/web"
	"webookpro/internal/web/jwt"
)

// Injectors from wire.go:

func InitWebServer() *gin.Engine {
	cmdable := InitRDB()
	limiter := ioc.InitLimiter(cmdable)
	jwtHandler := jwt.NewRedisJWTHandler(cmdable)
	logger := ioc.InitLogger()
	v := ioc.InitMiddlewares(limiter, jwtHandler, logger)
	db := InitDB()
	userDAO := dao.NewGormUserDAO(db)
	userCache := cache.NewRedisUserCache(cmdable)
	userRepository := repository.NewCachedUserRepository(userDAO, userCache)
	userService := service.NewUserService(userRepository, logger)
	codeCache := cache.NewRedisCodeCache(cmdable)
	codeRepository := repository.NewCachedCodeRepository(codeCache)
	smsService := ioc.InitSMSService()
	codeService := service.NewSMSCodeService(codeRepository, smsService)
	userHandler := web.NewUserHandler(userService, codeService, jwtHandler)
	oauth2Service := ioc.InitWechatService()
	oAuth2WechatHandler := web.NewOAuth2WechatHandler(oauth2Service, userService, jwtHandler)
	engine := ioc.InitWebServer(v, userHandler, oAuth2WechatHandler)
	return engine
}

func InitArticleHandler(dao2 article.ArticleDAO) *web.ArticleHandler {
	cmdable := InitRDB()
	articleCache := cache.NewRedisArticleCache(cmdable)
	logger := ioc.InitLogger()
	articleRepository := article2.NewCachedArticleRepository(dao2, articleCache, logger)
	articleServcie := service.NewArticleService(articleRepository)
	db := InitDB()
	interactiveDAO := dao.NewGORMInteractiveDAO(db)
	interactiveCache := cache.NewRedisInteractiveCache(cmdable)
	interactiveRepository := repository.NewCachedIntrRepository(interactiveDAO, interactiveCache, logger)
	interactiveService := service.NewInteractiveService(interactiveRepository, logger)
	articleHandler := web.NewArticleHandler(articleServcie, interactiveService, logger)
	return articleHandler
}

func InitInteractiveService() service.InteractiveService {
	db := InitDB()
	interactiveDAO := dao.NewGORMInteractiveDAO(db)
	cmdable := InitRDB()
	interactiveCache := cache.NewRedisInteractiveCache(cmdable)
	logger := ioc.InitLogger()
	interactiveRepository := repository.NewCachedIntrRepository(interactiveDAO, interactiveCache, logger)
	interactiveService := service.NewInteractiveService(interactiveRepository, logger)
	return interactiveService
}

// wire.go:

var thirdProvider = wire.NewSet(InitDB, InitRDB, ioc.InitLogger)

var interactiveSvcProvider = wire.NewSet(service.NewInteractiveService, repository.NewCachedIntrRepository, dao.NewGORMInteractiveDAO, cache.NewRedisInteractiveCache)
