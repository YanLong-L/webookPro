// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Users\liyl54\GolandProjects\webookPro\internal\service\article.go
//
// Generated by this command:
//
//	mockgen -source=C:\Users\liyl54\GolandProjects\webookPro\internal\service\article.go -package=svcmocks -destination=C:\Users\liyl54\GolandProjects\webookPro\internal\service\mock\article.mock.go
//

// Package svcmocks is a generated GoMock package.
package svcmocks

import (
	context "context"
	reflect "reflect"
	domain "webookpro/internal/domain"

	gomock "go.uber.org/mock/gomock"
)

// MockArticleServcie is a mock of ArticleServcie interface.
type MockArticleServcie struct {
	ctrl     *gomock.Controller
	recorder *MockArticleServcieMockRecorder
}

// MockArticleServcieMockRecorder is the mock recorder for MockArticleServcie.
type MockArticleServcieMockRecorder struct {
	mock *MockArticleServcie
}

// NewMockArticleServcie creates a new mock instance.
func NewMockArticleServcie(ctrl *gomock.Controller) *MockArticleServcie {
	mock := &MockArticleServcie{ctrl: ctrl}
	mock.recorder = &MockArticleServcieMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArticleServcie) EXPECT() *MockArticleServcieMockRecorder {
	return m.recorder
}

// Publish mocks base method.
func (m *MockArticleServcie) Publish(ctx context.Context, article domain.Article) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", ctx, article)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Publish indicates an expected call of Publish.
func (mr *MockArticleServcieMockRecorder) Publish(ctx, article any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockArticleServcie)(nil).Publish), ctx, article)
}

// PublishV1 mocks base method.
func (m *MockArticleServcie) PublishV1(ctx context.Context, article domain.Article) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishV1", ctx, article)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublishV1 indicates an expected call of PublishV1.
func (mr *MockArticleServcieMockRecorder) PublishV1(ctx, article any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishV1", reflect.TypeOf((*MockArticleServcie)(nil).PublishV1), ctx, article)
}

// Store mocks base method.
func (m *MockArticleServcie) Store(ctx context.Context, article domain.Article) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", ctx, article)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Store indicates an expected call of Store.
func (mr *MockArticleServcieMockRecorder) Store(ctx, article any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockArticleServcie)(nil).Store), ctx, article)
}
