// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Users\liyl54\GolandProjects\webookPro\internal\repository\article\reader_dao.go
//
// Generated by this command:
//
//	mockgen -source=C:\Users\liyl54\GolandProjects\webookPro\internal\repository\article\reader_dao.go -package=artrepomocks -destination=C:\Users\liyl54\GolandProjects\webookPro\internal\repository\article\mocks\article_reader.mock.go
//

// Package artrepomocks is a generated GoMock package.
package artrepomocks

import (
	context "context"
	reflect "reflect"
	domain "webookpro/internal/domain"

	gomock "go.uber.org/mock/gomock"
)

// MockArticleReaderRepository is a mock of ArticleReaderRepository interface.
type MockArticleReaderRepository struct {
	ctrl     *gomock.Controller
	recorder *MockArticleReaderRepositoryMockRecorder
}

// MockArticleReaderRepositoryMockRecorder is the mock recorder for MockArticleReaderRepository.
type MockArticleReaderRepositoryMockRecorder struct {
	mock *MockArticleReaderRepository
}

// NewMockArticleReaderRepository creates a new mock instance.
func NewMockArticleReaderRepository(ctrl *gomock.Controller) *MockArticleReaderRepository {
	mock := &MockArticleReaderRepository{ctrl: ctrl}
	mock.recorder = &MockArticleReaderRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArticleReaderRepository) EXPECT() *MockArticleReaderRepositoryMockRecorder {
	return m.recorder
}

// Store mocks base method.
func (m *MockArticleReaderRepository) Store(ctx context.Context, article domain.Article) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", ctx, article)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Store indicates an expected call of Store.
func (mr *MockArticleReaderRepositoryMockRecorder) Store(ctx, article any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockArticleReaderRepository)(nil).Store), ctx, article)
}
